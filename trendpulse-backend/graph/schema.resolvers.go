package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/markiskorova/trendpulse-backend/graph/generated"
	"github.com/markiskorova/trendpulse-backend/graph/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// SaveArticle is the resolver for the saveArticle field.
func (r *mutationResolver) SaveArticle(ctx context.Context, input model.SaveArticleInput) (*model.Article, error) {
	userID := getUserIDFromContext(ctx)
	if userID == 0 {
		return nil, fmt.Errorf("unauthorized")
	}

	// Save to DB
	article := models.Article{
		URL:    url,
		UserID: userID,
		Status: "pending",
	}
	if err := r.DB.Create(&article).Error; err != nil {
		return nil, err
	}

	// Enqueue background job
	if err := queue.EnqueueScrapeTask(article.ID); err != nil {
		return nil, fmt.Errorf("failed to enqueue scrape task: %w", err)
	}

	// Return GraphQL model (optional transformation if needed)
	return &model.Article{
		ID:        fmt.Sprint(article.ID),
		URL:       article.URL,
		Status:    article.Status,
		CreatedAt: article.CreatedAt.String(),
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) SaveArticle(ctx context.Context, input model.SaveArticleInput) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: SaveArticle - saveArticle"))
}
*/
